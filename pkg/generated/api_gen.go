// This is an autogenerated file, any edits which you make here will be lost!
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// Type definition for component schema "ActorURI"
type ActorURI string

// Type definition for component schema "CustodianyURI"
type CustodianyURI string

// Type definition for component schema "SimplifiedConsent"
type SimplifiedConsent struct {
	Actors    []ActorURI    `json:"actors"`
	Custodian CustodianyURI `json:"custodian"`
	Resources []string      `json:"resources"`
	Subject   SubjectURI    `json:"subject"`
}

// Type definition for component schema "SubjectURI"
type SubjectURI string

// Type definition for component schema "ValidationError"
type ValidationError struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}

// Type definition for component schema "ValidationResponse"
type ValidationResponse struct {
	Consent          *SimplifiedConsent `json,omitempty:"consent"`
	Outcome          string             `json:"outcome"`
	ValidationErrors []ValidationError  `json,omitempty:"validationErrors"`
}

// Request body for Validate for application/json ContentType
type ValidateRequestBody string

type ServerInterface interface {
	// Send a fhir consent record for validation. If valid the result will also include all accessible resources. (POST /consent/validate)
	Validate(ctx echo.Context) error
}

type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Wrapper for Validate
func (w *ServerInterfaceWrapper) Validate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Validate(ctx)
	return err
}

func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/consent/validate", wrapper.Validate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xVX2/bNhD/KgdmDw0gWN46YJjeumIYAgxFka57GfJAU2eLHUVyvJMTLfB3H46Spdhy",
	"52x+YsIj+bvfn9OzMqGNwaNnUtWzItNgq/PyneGQPt/fybpGMslGtsGrSn2+v4Mat9ZbvwNuELSUFtBR",
	"p53rQUNM2rCVckyqUPik2+hQVaphjlSVpe+YVt6VtkYvhUil3m1u1sPvB1Uo7qMcIE7W79ShUO874lBb",
	"7fvroLSHkHba27+1bM/QBK05XgQhDdD/B8T1JYifbBud3Vqs3wdP6HkJcy4BM9RAQhNSrQoVU4iY5CU5",
	"l5HllWVs8+KbhFtVqZtyFq0cFSsnuQ4TMJ2S7uXvqeNrl5xyfChUQgpdMgOi007eye0QtrBtbIK5sJjx",
	"Lgg6B0bd5gsavgbr01CWMWVQf3U2Ya2qP44svezxJer5iQfRZ77nuqlrzRrG06cGipqtiPtK12zI3/w4",
	"/i7a5nftbJ2N+nNKIS2x5X8DN5ohGNOlhDU8NtYh7MejI+ad3aO/ZqwWifQOl8/8NkS50w4wAym+puDi",
	"ZB9RrJCPVUC9Z/0Eb75Q8GAJNin8if62yMg4aet53vSBQQ+NnFrptoAYnDU9vMk9e4YPHcuBGoGQpWuC",
	"Ogw3OBcegRtLY9u3Io/vWjHJgEdMMr0vrOTL1cOiyzOL5d1iou3hRLF7pCh0Lzm5R+ocCyv7qRrkXiSG",
	"R8tNVix0bEKLC5HMPED+NRmLiXMo1PHO6nliIEOQaPph9XBB2v2pDV8/es79uwj6GaFHfA8H2bF+Gy5M",
	"l493QBGN3VozULcNCUzqIwcgTHtrkEDvtXV64zATaj1I/I7bQFEbYdZZg6NEXgsv6pePv+7fZpyWc3w/",
	"vDx3fCWiUYXaY6IB03r17WqdCY7odbSqUm9X65VkOmpuMk/lKFw5splfjYGykiJwbuauVpWaKgZ2kPin",
	"UPej+DyKr2N0IwOlJGb+SF8YsKdEc+pwGOHZoRned+v1f3rgdbJPIcgIzmMwOL7RBBtED1EnwnoFx3zk",
	"AQtNcDUd01AMg4RA+7rMH2mDRFZ0nkb7SoT4ftEO4xOX0WmbG5nnsw9T9jbC8hKo9SakJFhk8ucC6tpW",
	"p14+2+hr0MN8Oh2v2ZdzdFZwNwY+xzsNTT5a50A7CmC9cV2NMq++0lahWO9IcnKcAZKTwz8BAAD//49Z",
	"gCOqCQAA",
}

// Returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

