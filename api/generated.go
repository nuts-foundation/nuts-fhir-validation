// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"github.com/labstack/echo/v4"
)

// Identifier defines model for Identifier.
type Identifier string

// SimplifiedConsent defines model for SimplifiedConsent.
type SimplifiedConsent struct {
	Actors []Identifier `json:"actors"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a colon (:) and then the identifying value of the given URN
	Custodian Identifier `json:"custodian"`

	// Array of fhir resources
	Resources []string `json:"resources"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a colon (:) and then the identifying value of the given URN
	Subject Identifier `json:"subject"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {

	// The actual error
	Message string `json:"message"`

	// Type of error: syntax (json is broken), constraint (json is not a valid fhir resource), policy (current Nuts node settings do not allow this record)
	Type string `json:"type"`
}

// ValidationResponse defines model for ValidationResponse.
type ValidationResponse struct {

	// Simplified consent record
	Consent          *SimplifiedConsent `json:"consent,omitempty"`
	Outcome          string             `json:"outcome"`
	ValidationErrors *[]ValidationError `json:"validationErrors,omitempty"`
}

// ValidateJSONBody defines parameters for Validate.
type ValidateJSONBody string

// ValidateRequestBody defines body for Validate for application/json ContentType.
type ValidateJSONRequestBody ValidateJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send a fhir consent record for validation. If valid the result will also include all accessible resources.
	// (POST /consent/validate)
	Validate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Validate converts echo context to params.
func (w *ServerInterfaceWrapper) Validate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Validate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/consent/validate", wrapper.Validate)

}

